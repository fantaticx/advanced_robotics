// Generated by gencpp from file robot_door_closing/door_closeFeedback.msg
// DO NOT EDIT!


#ifndef ROBOT_DOOR_CLOSING_MESSAGE_DOOR_CLOSEFEEDBACK_H
#define ROBOT_DOOR_CLOSING_MESSAGE_DOOR_CLOSEFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_door_closing
{
template <class ContainerAllocator>
struct door_closeFeedback_
{
  typedef door_closeFeedback_<ContainerAllocator> Type;

  door_closeFeedback_()
    : status()  {
    }
  door_closeFeedback_(const ContainerAllocator& _alloc)
    : status(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::robot_door_closing::door_closeFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_door_closing::door_closeFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct door_closeFeedback_

typedef ::robot_door_closing::door_closeFeedback_<std::allocator<void> > door_closeFeedback;

typedef boost::shared_ptr< ::robot_door_closing::door_closeFeedback > door_closeFeedbackPtr;
typedef boost::shared_ptr< ::robot_door_closing::door_closeFeedback const> door_closeFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_door_closing::door_closeFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_door_closing::door_closeFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_door_closing::door_closeFeedback_<ContainerAllocator1> & lhs, const ::robot_door_closing::door_closeFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_door_closing::door_closeFeedback_<ContainerAllocator1> & lhs, const ::robot_door_closing::door_closeFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_door_closing

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_door_closing::door_closeFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_door_closing::door_closeFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_door_closing::door_closeFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_door_closing::door_closeFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_door_closing::door_closeFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_door_closing::door_closeFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_door_closing::door_closeFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "672ccc7edd3a5621529e608443618e1f";
  }

  static const char* value(const ::robot_door_closing::door_closeFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x672ccc7edd3a5621ULL;
  static const uint64_t static_value2 = 0x529e608443618e1fULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_door_closing::door_closeFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_door_closing/door_closeFeedback";
  }

  static const char* value(const ::robot_door_closing::door_closeFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_door_closing::door_closeFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#feedback\n"
"int32[] status\n"
"\n"
;
  }

  static const char* value(const ::robot_door_closing::door_closeFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_door_closing::door_closeFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct door_closeFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_door_closing::door_closeFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_door_closing::door_closeFeedback_<ContainerAllocator>& v)
  {
    s << indent << "status[]" << std::endl;
    for (size_t i = 0; i < v.status.size(); ++i)
    {
      s << indent << "  status[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.status[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_DOOR_CLOSING_MESSAGE_DOOR_CLOSEFEEDBACK_H
